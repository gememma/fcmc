use crate::lambdaterm::LambdaTerm;

grammar;

match {
    r"\\" => LAMBDA,
    "." => DOT,
    "(" => L_PAREN,
    ")" => R_PAREN,
    r"[a-z][0-9]*" => VAR,
}

pub LambdaTerm: LambdaTerm = {
    Var => <>,
    Lambda => <>,
    Apply => <>,
    L_PAREN <Var> R_PAREN => <>,
    L_PAREN <Lambda> R_PAREN => <>,
    L_PAREN <Apply> R_PAREN => <>,
};

Lambda: LambdaTerm = {
    LAMBDA <v:VAR> DOT <t:LambdaTerm> => LambdaTerm::Lambda {
        arg: v.to_string(),
        body: box t
    },
};

Var: LambdaTerm = {
    VAR => LambdaTerm::new_var(<>),
}

Apply: LambdaTerm = {
    <t1:Var> <t2:Var> => LambdaTerm::Apply {t1: box t1, t2: box t2},
    <t1:Var> L_PAREN <t2:Lambda> R_PAREN => LambdaTerm::Apply {t1: box t1, t2: box t2},
    <t1:Var> L_PAREN <t2:Apply> R_PAREN => LambdaTerm::Apply {t1: box t1, t2: box t2},
    L_PAREN <t1:Lambda> R_PAREN <t2:Var>  => LambdaTerm::Apply {t1: box t1, t2: box t2},
    L_PAREN <t1:Lambda> R_PAREN L_PAREN <t2:Lambda> R_PAREN  => LambdaTerm::Apply {t1: box t1, t2: box t2},
    L_PAREN <t1:Lambda> R_PAREN L_PAREN <t2:Apply> R_PAREN => LambdaTerm::Apply {t1: box t1, t2: box t2},
    <t1:Apply> <t2:Var>  => LambdaTerm::Apply {t1: box t1, t2: box t2},
    <t1:Apply> L_PAREN <t2:Lambda> R_PAREN => LambdaTerm::Apply {t1: box t1, t2: box t2},
    <t1:Apply> L_PAREN <t2:Apply> R_PAREN  => LambdaTerm::Apply {t1: box t1, t2: box t2},
};
